/****************************************************
 *                  calculus.bc                     *
 ****************************************************

  Author: Marc Mel√©ndez Schofield

  Simple numerical derivatives and integrals. Set
  generic_f equal to the function of interest before
  calculating derivatives or integrals. */

/* Default generic function f(x) = 0 */
define generic_f(x) { return 0; }

/* Numerical centred derivative of generic_f at point
   x with step size dx */
define diff(x, dx) {
  return (generic_f(x + 0.5*dx) - generic_f(x - 0.5*dx))/dx;
}

/* Numerical nth derivative of generic_f at point x
   with step size dx */
define diffn(n, x, dx) {
  if (n == 0) return generic_f(x);
  if (n == 1) return diff(x, dx);
  if (n < 0)
  {
    print "Error: n must be a positive integer.\n";
    return 1/0;
   }
   return (diffn(n - 1, x + 0.5*dx, dx) - diffn(n - 1, x - 0.5*dx, dx))/dx;
}

/* Numerical integral of generic_f from a to b with
   step size dx, using Euler's algorithm */
define integral(a, b, dx) {
  auto x, integ;
  for(x = a; x < b; x += dx)
    integ += generic_f(x)*dx;
  return integ;
}

/* Numerical integral of generic_f from a to b with 
   step size dx, using Simpson's algorithm */
define simpson(a, b, dx) {
  auto x, integ;
  for(x = a; x < b; x += dx)
    integ += (dx/6.0)*(generic_f(x) + generic_f(x + dx) + 4*generic_f(x + 0.5*dx));
  return integ;
}
