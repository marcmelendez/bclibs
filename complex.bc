/***************************************************
 *                   complex.bc                    *
 ***************************************************

 Author: Marc MelÃ©ndez Schofield

 Complex number arithmetic.

 Represent a complex number a + bi with an array,

   z[0] = a; z[1] = b;

 complex.bc depends on the exponential, logarithmic
 and trigonometric functions, so run bc with the -l
 option.

 Total and partial reproduction and modification of
 this code are allowed. No warranties. */

/* Print the complex number z as a + bi */
define printz(z[]) {
  if(z[1] >= 0) {
    print z[0], " + ", z[1], "i\n";
  } else {
    print z[0], " - ", -z[1], "i\n";
  }
  return 0;
}

/*  Real part of z  */
define rez(z[]) {
  return z[0];
}

/*  Imaginary part of z  */
define imz(z[]) {
  return z[1];
}

/*  Add two complex numbers z1 + z2 = z3  */
define addz(z1[], z2[], *z3[]) {
  z3[0] = z1[0] + z2[0];
  z3[1] = z1[1] + z2[1];
  return 0;
}

/*  Subtract z2 from z1, z1 - z2 = z3 */
define subtz(z1[], z2[], *z3[]) {
  z3[0] = z1[0] - z2[0];
  z3[1] = z1[1] - z2[1];
  return 0;
}

/*  Product of z1 and z2  */
define prodz(z1[], z2[], *z3[]) {
  z3[0] = z1[0]*z2[0] - z1[1]*z2[1];
  z3[1] = z1[0]*z2[1] + z2[0]*z1[1];
  return 0;
}

/*  Divide z1 by z2  */
define divz(z1[], z2[], *z3[]) {
  z3[0] = (z1[0]*z2[0] + z1[1]*z2[1])/(z2[0]^2 + z2[1]^2);
  z3[1] = (z1[1]*z2[0] - z1[0]*z2[1])/(z2[0]^2 + z2[1]^2);
  return 0;
}

/*  Conjugate of z  */
define conj(z[], *zconj[]) {
  zconj[0] = z[0];
  zconj[1] = -z[1];
  return 0;
}

/*  Modulus of z  */
define modz(z[]) {
  return sqrt(z[0]^2 + z[1]^2);
}

/*  Argument of z. */
define argz(z[]) {
  auto pi = 4*a(1);

  if(z[0] == 0) {
    if(z[1] > 0) {
      return pi/2.0;
    } else if(z[1] < 0) {
      return -pi/2.0;
    } else {
      print "Error: argument undefined.\n";
      return 1/0;
    }
  } else if(z[0] > 0){
    return a(z[1]/z[0]);
  } else {
    if(z[1] >= 0) {
      return a(z[1]/z[0]) + pi;
    } else {
      return a(z[1]/z[0]) - pi;
    }
  }
}

/*  Print a complex number in trigonometric form */
define printzt(z[]) {
  auto argument;
  argument = argz(z[]);
  print  modz(z[]), " * ";
  print "(cos(", argument, ") + i sin(", argument, "))\n";
  return 0;
}

/*  Integer part of a real number, used in the function
    pow(x,y) below.  */
define int(x) {
  auto s;
  s = scale;
  scale = 0;
  x /= 1;
  scale = s;
  return x;
}

/*  Power function x^y with x and y arbitrary real numbers */
define pow(x, y) {
  if(int(y) == y)
    return x^y;
  if(int(y) != y)
    return e(y*l(x));
}

/*  Complex z to the power x, where x is a real number.
    z^(1/n) calculates the first nth root, to obtain
    the remaining roots simply multiply by
    exp(2*k*pi/n), with k = 1, 2, 3, ..., n - 1.  */
define powz(z[], x, *zpowx[]) {
  auto modulus, argument;
  modulus = modz(z[]);
  argument = argz(z[]);
  zpowx[0] = pow(modulus, x) * c(argument*x);
  zpowx[1] = pow(modulus, x) * s(argument*x);
  return 0;
}

/*  The n nth roots of complex number z (integer n) */
define rootsz(z[], n) {
  auto root[], modulus, argument, modroot, k;
  modulus = modz(z[]);
  argument = argz(z[]);
  modroot = pow(modulus, 1/n);
  for(k = 0; k < n; k++)
  {
    root[0] = modroot * c(argument/n + 2*pi*k/n);
    root[1] = modroot * s(argument/n + 2*pi*k/n);
    . = printz(root[]);
  }
  return 0;
}

/*  Exponential of a complex number, using the expression

    exp(a + ib) = exp(a) * exp(ib)

    and Euler's formula

    exp(a) * exp(ib) = exp(a) * (cos(b) + i sin(b))
*/
define expz(z[], *exp_z[]) {
  exp_z[0] = e(z[0])*c(z[1]);
  exp_z[1] = e(z[0])*s(z[1]);
  return 0;
}

/*  Logarithm of a complex number  */
define logz(z[], *log_z[]) {
  auto modulus, argument;
  modulus = modz(z[]);
  argument = argz(z[]);
  log_z[0] = l(modulus);
  log_z[1] = argument;
  return 0;
}

/*  z1^z2 = exp(z2 Ln(z1))  */
define powzz(z1[], z2[], *z1powz2[]) {
  auto logz1[], z2logz1[];
  . = logz(z1[], logz1[]);
  . = prodz(z2[],logz1[], z2logz1[]);
  . = expz(z2logz1[], z1powz2[]);
  return 0;
}

/*  Sine of z

    sin(z) = 1/2 (exp(iz) - exp(-iz))

    Partial results are stored in temporary variables
    to make the code easier to read (expmiz[] stores
    the value of exp(-iz), for example).  */
define sinz(z[], *sin_z[]) {
  auto iz[], miz[], expiz[], expmiz[];
  iz[0] = -z[1];
  iz[1] = z[0];
  miz[0] = z[1];
  miz[1] = -z[0];
  . = expz(iz[], expiz[]);
  . = expz(miz[], expmiz[]);
  sin_z[0] = (expiz[1] - expmiz[1])/2;
  sin_z[1] = (expmiz[0] - expiz[0])/2;
  return 0;
}

/*  Cosine of z

    cos(z) = 1/2 (exp(iz) + exp(-iz))  */
define cosz(z[], *cos_z[]) {
  auto iz[], miz[], expiz[], expmiz[];
  iz[0] = -z[1];
  iz[1] = z[0];
  miz[0] = z[1];
  miz[1] = -z[0];
  . = expz(iz[], expiz[]);
  . = expz(miz[], expmiz[]);
  cos_z[0] = (expiz[0] + expmiz[0])/2;
  cos_z[1] = (expiz[1] + expmiz[1])/2;
  return 0;
}

/* Tangent of z */
define tanz(z[], *tan_z[]) {
  auto sin_z, cos_z;
  . = sinz(z[], sin_z[]);
  . = cosz(z[], cos_z[]);
  . = divz(sin_z[], cos_z[], tan_z[]);
}

/* Hyperbolic functions */
define sinhz(z[], *sinh_z[]) {
  auto mz[], exp_z[], exp_mz[];
  mz[0] = -z[0]; mz[1] = -z[1];
  . = expz(z[], exp_z[]);
  . = expz(mz[], exp_mz[]);
  . = subtz(exp_z[], exp_mz[], sinh_z[]);
  sinh_z[0] *= 0.5; sinh_z[1] *= 0.5;
  return 0;
}

define coshz(z[], *cosh_z[]) {
  auto mz[], exp_z[], exp_mz[];
  mz[0] = -z[0]; mz[1] = -z[1];
  . = expz(z[], exp_z[]);
  . = expz(mz[], exp_mz[]);
  . = addz(exp_z[], exp_mz[], cosh_z[]);
  cosh_z[0] *= 0.5; cosh_z[1] *= 0.5;
  return 0;
}

define tanhz(z[], *tanh_z[]) {
  auto sinh_z[], cosh_z[];
  . = sinhz(z[], sinh_z[]);
  . = coshz(z[], cosh_z[]);
  . = divz(sinh_z[], cosh_z[], tanh_z[]);
  return 0;
}
