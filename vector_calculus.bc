/****************************************************
 *                vector_calculus.bc                *
 ****************************************************

  Author: Marc Mel√©ndez Schofield

  Simple numerical derivatives and integrals. Set
  generic_f equal to the function of interest before
  calculating derivatives or integrals. */

/* Default generic function f(x) = x */
define generic_f(x) { return x; }

/* Numerical centred derivative of generic_f at point
   x with step size dx */
define diff(x, dx) {
  return (generic_f(x + 0.5*dx) - generic_f(x - 0.5*dx))/dx;
}

/* Numerical nth derivative of generic_f at point x
   with step size dx */
define diffn(n, x, dx) {
  if (n == 0) return generic_f(x);
  if (n == 1) return diff(x, dx);
  if (n < 0)
  {
    print "Error: n must be a positive integer.\n";
    return 1/0;
   }
   return (diffn(n - 1, x + 0.5*dx, dx) - diffn(n - 1, x - 0.5*dx, dx))/dx;
}

/* Numerical integral of generic_f from a to b with
   step size dx, using Euler's algorithm */
define integral(a, b, dx) {
  auto x, integ;
  if(b < a) return -integral(b, a, dx);
  for(x = a; x < b; x += dx)
    integ += generic_f(x)*dx;
  return integ;
}

/* Numerical integral of generic_f from a to b with
   step size dx, using Simpson's algorithm */
define simpson(a, b, dx) {
  auto x, integ, f, fp;
  if(b < a) return -simpson(b, a, dx);
  f = generic_f(x);
  for(x = a; x < b; x += dx) {
    fp = generic_f(x + dx);
    integ += (dx/6.0)*(f + fp + 4*generic_f(x + 0.5*dx));
    f = fp;
  }
  return integ;
}

/* Default generic dimensionality */
generic_dim = 3;

/* Numerical centered partial derivatives */
define partial_diff(idx[], x[], dx) {
  auto n, m, xp[], xm[], newidx[];
  for(n = 0; n < generic_dim; n++) xp[n] = xm[n] = x[n];
  for(n = 0; n < generic_dim; n++) {
    if(idx[n] > 0) {
      for(m = 0; m < generic_dim; m++) {
          newidx[m] = idx[m];
      }
      . = newidx[n]--;
      xp[n] += 0.5*dx;
      xm[n] -= 0.5*dx;
      return (partial_diff(newidx[], xp[], dx) - partial_diff(newidx[], xm[], dx))/dx;
    }
  }
  return generic_f(x[]);
}

/* Gradient */
define grad(x[], *gradf[], dx) {
  auto n;
  for(n = 0; n < generic_dim; n++) {
    x[n] += 0.5*dx;
    gradf[n] = generic_f(x[]);
    x[n] -= dx;
    gradf[n] -= generic_f(x[]);
    gradf[n] /= dx;
  }
}

/* Divergence */
define div(x[], dx) {
  auto n, divf, divterm;
  divf = 0;
  for(n = 0; n < generic_dim; n++) {
    divterm = 0;
    x[n] += 0.5*dx;
    divterm += generic_f(x[]);
    x[n] -= dx;
    divterm -= generic_f(x[]);
    x[n] += 0.5*dx;
    divterm /= dx;
    divf += divterm;
  }
  return divf;
}

/* Rotational (assumes generic_f(x[], *f[]) of generic_dim = 3)*/
define rot(x[], *rotf[], dx) {
  auto i, xm[], xp[], ym[], yp[], zm[], zp[], fxm[], fxp[], fym[], fyp[], fzm[], fzp[];

  for(i = 0; i < 3; i++) {
    xm[i] = xp[i] = ym[i] = yp[i] = zm[i] = zp[i] = x[i];
  }

  xm[0] -= 0.5*dx; ym[1] -= 0.5*dx; zm[2] -= 0.5*dx;
  xp[0] += 0.5*dx; yp[1] += 0.5*dx; zp[2] += 0.5*dx;

  . = generic_f(xm[], fxm[]); . = generic_f(xp[], fxp[]);
  . = generic_f(ym[], fym[]); . = generic_f(yp[], fyp[]);
  . = generic_f(zm[], fzm[]); . = generic_f(zp[], fzp[]);

  rotf[0] = ((fyp[2] - fym[2]) - (fzp[1] - fzm[1]))/dx;
  rotf[1] = ((fzp[0] - fzm[0]) - (fxp[2] - fxm[2]))/dx;
  rotf[2] = ((fxp[1] - fxm[1]) - (fyp[0] - fym[0]))/dx;
}

/* Laplacian (assumes generic_f(x[], *f[]) of generic_dim = 3) */
define laplacian(x[], dx) {
  auto n, f[], delterm, delf;
  delf = 0;
  for(n = 0; n < generic_dim; n++) {
    x[n] -= dx;
    . = generic_f(x[], f[])
    delterm = f[n];
    x[n] += 2*dx;
    . = generic_f(x[], f[])
    delterm += f[n];
    x[n] -= dx;
    . = generic_f(x[], f[])
    delterm -= 2*f[n];
    delterm /= dx^2;
    delf += delterm;
  }
  return delf;
}

/* n-dimensional numerical integration applying Simpson's rule (UNFINISHED)
define ndimsimpson(dim, a[], b[], dx) {
  auto n, x, integ, f[], fp[], fpp[];
  if(dim <= 2) {
    . = generic_f(x[], f[]);
    for(x = a[0]; x < b[0]; x += dx) {
      . = generic_f(x
      integ += (dx/6.0)*(generic_f(x) + generic_f(x + dx) + 4*generic_f(x + 0.5*dx));
    }
    return integ;
  }

  auto x, integ;

}
*/

/* Arc length assumes generic_f(t, *f[]) */
define arclength(ta, tb, dt) {
  auto t, n, f[], fp[], ds2, s;
  s = 0;
  for(t = ta; t < tb; t += dt) {
    . = generic_f(t, f[]); . = generic_f(t + dt, fp[]);
    ds2 = 0;
    for(n = 0; n < generic_dim; n++) {
      ds2 += (fp[n] - f[n])^2;
    }
    s += sqrt(ds2);
  }
  return s;
}
